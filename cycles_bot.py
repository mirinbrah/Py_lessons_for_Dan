import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters.command import Command, CommandObject

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
from config import TOKEN_CYCLES

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# –î–æ–±–∞–≤–ª—è–µ–º parse_mode="HTML" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞
bot = Bot(
    token=TOKEN_CYCLES,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


#  –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—É—á–∞—é—â–∏–π –±–æ—Ç.\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/math - <i>–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</i>\n"
        "/countdown - <i>—Ü–∏–∫–ª FOR</i>\n"
        "/repeat - <i>—Ü–∏–∫–ª WHILE</i>\n\n"
        "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /help"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /help
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "<b>–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\n\n"

        "<code>/math [—á–∏—Å–ª–æ1] [—á–∏—Å–ª–æ2]</code>\n"
        "‚Ü≥ <i>–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–æ–∂–µ–Ω–∏–µ, –≤—ã—á–∏—Ç–∞–Ω–∏–µ, —É–º–Ω–æ–∂–µ–Ω–∏–µ –∏ –¥–µ–ª–µ–Ω–∏–µ.</i>\n"
        "   <b>–ü—Ä–∏–º–µ—Ä:</b> <code>/math 100 25</code>\n\n"

        "<code>/countdown [—á–∏—Å–ª–æ]</code>\n"
        "‚Ü≥ <i>–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç. –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10.</i>\n"
        "   <b>–ü—Ä–∏–º–µ—Ä:</b> <code>/countdown 8</code>\n\n"

        "<code>/repeat [—Ç–µ–∫—Å—Ç]</code>\n"
        "‚Ü≥ <i>–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –≤–∞—à —Ç–µ–∫—Å—Ç 3 —Ä–∞–∑–∞. –î–ª–∏–Ω–∞ –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.</i>\n"
        "   <b>–ü—Ä–∏–º–µ—Ä:</b> <code>/repeat –£—á—É—Å—å –¥–µ–ª–∞—Ç—å –±–æ—Ç–æ–≤</code>"
    )
    await message.answer(help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /math
@dp.message(Command("math"))
async def cmd_math(message: types.Message, command: CommandObject):
    if not command.args:
        await message.answer("<b>–û—à–∏–±–∫–∞:</b> –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —á–∏—Å–ª–∞.\n–ü—Ä–∏–º–µ—Ä: <code>/math 10 5</code>")
        return

    try:
        parts = command.args.split()
        if len(parts) != 2:
            await message.answer("<b>–û—à–∏–±–∫–∞:</b> –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ä–æ–≤–Ω–æ –¥–≤–∞ —á–∏—Å–ª–∞.\n–ü—Ä–∏–º–µ—Ä: <code>/math 10 5</code>")
            return

        a = float(parts[0])
        b = float(parts[1])

        response_text = (
            f"<b>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏:</b>\n\n"
            f"–î–∞–Ω–æ: a = {a}, b = {b}\n\n"
            f"–°–ª–æ–∂–µ–Ω–∏–µ: {a} + {b} = {a + b}\n"
            f"–í—ã—á–∏—Ç–∞–Ω–∏–µ: {a} - {b} = {a - b}\n"
            f"–£–º–Ω–æ–∂–µ–Ω–∏–µ: {a} * {b} = {a * b}\n"
            f"–î–µ–ª–µ–Ω–∏–µ: {a} / {b} = {a / b if b != 0 else '–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å'}"
        )
        await message.answer(response_text)

    except ValueError:
        await message.answer("<b>–û—à–∏–±–∫–∞:</b> –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /countdown
@dp.message(Command("countdown"))
async def cmd_countdown(message: types.Message, command: CommandObject):
    if not command.args:
        await message.answer("<b>–û—à–∏–±–∫–∞:</b> —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –æ—Ç—Å—á–µ—Ç–∞.\n–ü—Ä–∏–º–µ—Ä: <code>/countdown 7</code>")
        return

    try:
        start_from = int(command.args)

        if not 0 < start_from <= 10:
            await message.answer("<b>–û—à–∏–±–∫–∞:</b> —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10.")
            return

        await message.answer(f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç —Å <b>{start_from}</b>...")
        for i in range(start_from, 0, -1):
            await message.answer(str(i))
            await asyncio.sleep(1)
        await message.answer("–ü—É—Å–∫! üöÄ")

    except ValueError:
        await message.answer("<b>–û—à–∏–±–∫–∞:</b> –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /repeat
@dp.message(Command("repeat"))
async def cmd_repeat(message: types.Message, command: CommandObject):
    if not command.args:
        await message.answer(
            "<b>–û—à–∏–±–∫–∞:</b> –≤–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: <code>/repeat –Ø –ª—é–±–ª—é Python</code>")
        return

    phrase_to_repeat = command.args

    if len(phrase_to_repeat) > 50:
        await message.answer("<b>–û—à–∏–±–∫–∞:</b> –≤–∞—à–∞ —Ñ—Ä–∞–∑–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    await message.answer(f"–°–µ–π—á–∞—Å —è –ø–æ–≤—Ç–æ—Ä—é –≤–∞—à—É —Ñ—Ä–∞–∑—É 3 —Ä–∞–∑–∞.")
    counter = 0
    while counter < 3:
        counter += 1
        await message.answer(f"–ü–æ–≤—Ç–æ—Ä #{counter}: {phrase_to_repeat}")
        await asyncio.sleep(0.5)


# –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    try:
        await dp.start_polling(bot)
    finally:
        # –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ Ctrl+C)
        # –û–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram
        await bot.session.close()

# —Ç—Ä—é–∫ —á—Ç–æ–±—ã –∫–æ–¥ –∏—Å–ø–æ–ª–Ω—è–ª—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã —ç—Ç–æ—Ç —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é –∑–∞–ø—É—Å–∫–∞–µ–º, –ø–æ–ª–µ–∑–Ω–æ –∫–æ–≥–¥–∞ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ
if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ–Ω–æ —Ä–∞–±–æ—Ç–∞–ª–æ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∑–∞–ø—É—Å–∫ –≤ try...except –¥–ª—è "–ª–æ–≤–ª–∏" KeyboardInterrupt
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Ctrl+C –≤ –∫–æ–Ω—Å–æ–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ traceback
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")